//#pragma GCC optimize("Ofast")
//#pragma GCC target("avx,avx2,fma")

#include <bits/stdc++.h>

#define besmellah ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
using namespace std;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
const ll INF = 1e9 + 7;

const int OO = 0x3f3f3f3f;
const ll LOO = 0x3f3f3f3f3f3f3f3f;
const ll MOD = 1e9 + 7;
const ll N = 1e5;
const double EPS = 1e-6;
#define M_PI 3.14159265358979323846
#define all(a)  a.begin(),a.end()
#define endl '\n'

int lg(int n) { return 31 - __builtin_clz(n); }

const int dx[] = {+0, +0, +1, -1, +1, -1, +1, -1};
const int dy[] = {+1, -1, +0, +0, +1, -1, -1, +1};
int knightDx[] = {+1, -1, +2, +2, -2, -2, +1, -1};
int knightDy[] = {+2, +2, +1, -1, +1, -1, -2, -2};
//#define int long long

vector<string> ans;
unordered_map<string, bool> done;

class Trie {
private:
    struct Node {
        bool isEnd = 0;
        int id = 0;
        vector<Node *> children = {};


        Node() : children(vector<Node *>(26, NULL)) {}

        Node(int id) : id(id), children(vector<Node *>(26, NULL)) {};
    };

    Node *root = NULL;
public:
    Trie() {
        root = new Node;
    }


    void add(string &s) {
        Node *node = root;
        for (auto &ch: s) {
            if (node->children[(ch - 'a')] == NULL) {
                node->children[(ch - 'a')] = new Node(ch - 'a');
            }
            node = node->children[(ch - 'a')];
        }
        node->isEnd = 1;

    }

    void dfs(string hoba, Node *node) {
        if (node->isEnd == 1) {
            ans.push_back(hoba);
        }
        for (int i = 0; i < 26; ++i) {
            if (node->children[i] != NULL) {
                char s = (char) (node->children[i]->id + 'a');
                dfs(hoba + s, node->children[i]);
            }
        }
    }

    void srch(string &s) {
        Node *node = root;
        string str;
        for (int i = 0; i < s.size(); i++) {
            char ch = s[i];
            if (node->children[(ch - 'a')] != NULL) {
                str += ch;
                node = node->children[(ch - 'a')];
            } else {
                break;
            }
        }
        if (s == str) {
            for (int i = 0; i < 26; ++i) {
                if (node->children[i] != NULL) {
                    char c = i + 'a';
                    dfs(str + c, node->children[i]);
                }
            }
        }
    }


    void del(Node *x) {
        for (auto &i: x->children) {
            if (i != nullptr)
                del(i);
        }
        delete x;
    }

    void del() {
        del(root);
    }


};

signed main() {
    besmellah
//Sky is the limit ❤
#ifdef CLION
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
    //freopen("", "r", stdin);
#endif
    int T = 1;
    int u = 0;
//    cin >> T;
//remember data type long long or int
    while (T--) {
        int n, m;
        cin >> n;
        vector<string> v(n);
        Trie trie;
        for (int i = 0; i < n; ++i) {
            cin >> v[i];
            trie.add(v[i]);
        }
        cin >> m;
        while (m--) {
            cout << "Case #" << ++u << ':' << endl;
            string s;
            cin >> s;
            trie.srch(s);
            if (ans.size())
                for (auto &ss: ans)cout << ss << endl;
            else
                cout << "No match.\n";
            ans.clear();
        }
        trie.del();
    }
//remember data type long long or int

}
