//#pragma GCC optimize("Ofast")
//#pragma GCC target("avx,avx2,fma")

#include <bits/stdc++.h>

#define besmellah ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
using namespace std;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
const ll INF = 1e9 + 7;
const int OO = 0x3f3f3f3f;
const ll LOO = 0x3f3f3f3f3f3f3f3f;
const ll MOD = 1e9 + 7;
const ll N = 2e5;
const double EPS = 1e-6;
#define M_PI 3.14159265358979323846
#define all(a)  a.begin(),a.end()
#define endl '\n'
const int dx[] = {+0, +0, +1, -1, +1, -1, +1, -1};
const int dy[] = {+1, -1, +0, +0, +1, -1, -1, +1};
int knightDx[] = {+1, -1, +2, +2, -2, -2, +1, -1};
int knightDy[] = {+2, +2, +1, -1, +1, -1, -2, -2};
#define int long long


vector<vector<vector<int>>> dp1(N + 5, vector<vector<int>>(2, vector<int>(2, -1)));

vector<vector<int>> dp2(N + 5, vector<int>(2, -1));
int n = 0;
string s;

int solve1(int i, bool zero, bool one) {
    if (i == n)return 0;
    if (s[i] == '1') {
        if (zero)return 1;
        if (one)return 0;
    }
    int &ret = dp1[i][zero][one];
    if(~ret)return ret;
    one |= (s[i] == '1');
    ret = solve1(i + 1, zero, one) + one;
    return ret;
}

int solve2(int i, int sum) {
    if (i == n)return 0;
    int &ret = dp2[i][sum];
    if(~ret)return ret;
    sum += (s[i] == '1');
    sum &= 1;
    ret = solve2(i + 1, sum) + sum;
    return ret;
}


signed main() {
    besmellah
//Sky is the limit ❤
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
    //freopen("", "r", stdin);
#endif
    int T = 1;
    cin >> T;
//remember data type long long or int
    while (T--) {
        cin >> n >> s;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < 2; ++j) {
                for (int k = 0; k < 2; ++k) {
                    dp1[i][j][k] = -1;
                }
            }
            dp2[i][0] = dp2[i][1] = -1;
        }
        int cur = 0;
        for (int i = 0; i < n; ++i) {
            cur -= solve1(i, s[i] == '0', 0);
            cur += solve2(i, 0);
        }
        cout << cur << endl;
    }
//remember data type long long or int

}
