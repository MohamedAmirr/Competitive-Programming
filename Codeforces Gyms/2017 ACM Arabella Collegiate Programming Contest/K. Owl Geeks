//#pragma GCC optimize("Ofast")
//#pragma GCC target("avx,avx2,fma")

#include <bits/stdc++.h>

#define besmellah ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
using namespace std;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
const ll INF = 1e9 + 7;
const int OO = 0x3f3f3f3f;
const ll LOO = 0x3f3f3f3f3f3f3f3f;
const ll MOD = 1e9 + 7;
const ll N = 1e2;
const double EPS = 1e-6;
#define M_PI 3.14159265358979323846
#define all(a)  a.begin(),a.end()
#define endl '\n'
const int dx[] = {+0, +0, +1, -1, +1, -1, +1, -1};
const int dy[] = {+1, -1, +0, +0, +1, -1, -1, +1};
int knightDx[] = {+1, -1, +2, +2, -2, -2, +1, -1};
int knightDy[] = {+2, +2, +1, -1, +1, -1, -2, -2};
#define int long long

map<int, int> mp;

void hoba(ll n) {
    map<int, int> mp1;
    int mxTek = 0;
    while (n) {
        mp1[n % 10]++;
        if (mxTek < mp1[n % 10]) {
            mxTek = mp1[n % 10];
        }
        n /= 10;
    }
    for (auto &s: mp1) {
        if (s.second == mxTek) {
            mp[s.first]++;
        }
    }
}

ll power(ll x, ll y) {
    if (y == 0) { return 1; }
    ll sq = power(x, y / 2);
    sq = ((sq) * (sq));
    if (y & 1)sq *= x;
    return sq;
}

signed main() {
    besmellah
//Sky is the limit ❤
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
    //freopen("", "r", stdin);
#endif
    int T = 1;
    cin >> T;
//remember data type long long or int
    while (T--) {
        ll a, b, n;
        cin >> a >> b >> n;
        ll x = 1;
        ll u = a * power(x, 2) + (b * x);
        while (u <= n) {
            hoba(u);
            x++;
            u = a * power(x, 2) + (b * x);
        }
        ll mn = -1;
        int ans = 0;
        for (auto &s: mp) {
            if (s.second > mn) {
                mn = s.second;
                ans = s.first;
            }
        }
        if (mp.size() == 0) {
            cout << -1 << endl;
        } else cout << ans << endl;
        mp.clear();

    }
//remember data type long long or int

}
